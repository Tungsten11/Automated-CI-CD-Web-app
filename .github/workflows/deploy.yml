name: My CI/CD Project

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - "**/README.md"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1
      IMAGE_TAG: latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade Flask and update requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flask
          pip freeze > requirements.txt

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Build Docker Image
        run: docker build -t seeker1/flaskapp:latest ./app

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "seeker1/flaskapp:latest"
          format: "table"
          exit-code: "0"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: docker push seeker1/flaskapp:latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Check and Force Unlock Terraform
        run: |
          echo "Checking for existing Terraform locks..."

          terraform plan -input=false || true

          LOCK_ID=$(terraform plan -input=false 2>&1 | grep -oE '[0-9a-f-]{36}' | head -n 1)

          if [ -n "$LOCK_ID" ]; then
            echo "Lock detected: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "No lock detected."
          fi
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Show EC2 Public IP
        run: terraform output instance_ip
        working-directory: ./terraform
